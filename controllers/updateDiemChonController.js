// controllers/updateDiemChonController.js
const ChuongTrinh = require('../models/ChuongTrinh');
const TieuChiDauRa = require('../models/TieuChiDauRa');
const MonHocTieuChi = require('../models/MonHocTieuChi');

exports.updateDiemChonFromChuongTrinh = async (req, res) => {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t DiemChon t·ª´ ChuongTrinh...');
    
    // B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ ch∆∞∆°ng tr√¨nh (kh√¥ng filter g√¨ c·∫£)
    const chuongTrinhList = await ChuongTrinh.find({}).lean();
    
    if (!chuongTrinhList || chuongTrinhList.length === 0) {
      return res.render('allforms', {
        message: '‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong ChuongTrinh.',
        activeTab: 'importData'
      });
    }
    
    console.log(`üìã T√¨m th·∫•y ${chuongTrinhList.length} ch∆∞∆°ng tr√¨nh`);
    
    let totalUpdated = 0;
    let totalErrors = 0;
    let errors = [];
    let processedKhois = 0;
    let skippedKhois = 0;
    
    // B∆∞·ªõc 2: X·ª≠ l√Ω t·ª´ng ch∆∞∆°ng tr√¨nh
    for (const chuongTrinh of chuongTrinhList) {
      try {
        const maKhoi = chuongTrinh.MaKhoi?.trim(); // L√†m s·∫°ch MaKhoi
        let diemChon = chuongTrinh.DiemChon;
        
        // Ki·ªÉm tra v√† x·ª≠ l√Ω DiemChon
        if (diemChon === null || diemChon === undefined || diemChon === 'null') {
          console.log(`‚ö†Ô∏è B·ªè qua MaKhoi "${maKhoi}": DiemChon kh√¥ng h·ª£p l·ªá (${diemChon})`);
          skippedKhois++;
          continue;
        }
        
        // Chuy·ªÉn DiemChon v·ªÅ s·ªë n·∫øu c·∫ßn
        if (typeof diemChon === 'string') {
          diemChon = parseFloat(diemChon);
          if (isNaN(diemChon)) {
            console.log(`‚ö†Ô∏è B·ªè qua MaKhoi "${maKhoi}": DiemChon kh√¥ng th·ªÉ chuy·ªÉn th√†nh s·ªë`);
            skippedKhois++;
            continue;
          }
        }
        
        console.log(`üîç X·ª≠ l√Ω MaKhoi: "${maKhoi}", DiemChon: ${diemChon} (type: ${typeof diemChon})`);
        
        // B∆∞·ªõc 3: L·∫•y c√°c MaTieuChi t·ª´ TieuChiDauRa theo MaKhoi
        const tieuChiDauRaList = await TieuChiDauRa.find({ MaKhoi: maKhoi }).lean();
        
        if (!tieuChiDauRaList || tieuChiDauRaList.length === 0) {
          console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ cho MaKhoi: "${maKhoi}"`);
          skippedKhois++;
          continue;
        }
        
        // L√†m s·∫°ch MaTieuChi
        const maTieuChiList = tieuChiDauRaList.map(tc => tc.MaTieuChi?.trim()).filter(tc => tc);
        console.log(`üìù T√¨m th·∫•y ${maTieuChiList.length} ti√™u ch√≠ cho MaKhoi "${maKhoi}"`);
        
        // B∆∞·ªõc 4: C·∫≠p nh·∫≠t DiemChon cho t·∫•t c·∫£ MonHocTieuChi c√≥ MaTieuChi t∆∞∆°ng ·ª©ng
        let updatedForThisKhoi = 0;
        
        for (const maTieuChi of maTieuChiList) {
          try {
            // Ki·ªÉm tra xem c√≥ b·∫£n ghi n√†o kh√¥ng
            const existingCount = await MonHocTieuChi.countDocuments({ MaTieuChi: maTieuChi });
            
            if (existingCount === 0) {
              console.log(`   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£n ghi MonHocTieuChi cho MaTieuChi: "${maTieuChi}"`);
              continue;
            }
            
            console.log(`   üîç T√¨m th·∫•y ${existingCount} b·∫£n ghi MonHocTieuChi cho MaTieuChi: "${maTieuChi}"`);
            
            // Th·ª±c hi·ªán update
            const updateResult = await MonHocTieuChi.updateMany(
              { MaTieuChi: maTieuChi },
              { $set: { DiemChon: diemChon } }
            );
            
            console.log(`   ‚úÖ K·∫øt qu·∫£ update: matched=${updateResult.matchedCount}, modified=${updateResult.modifiedCount}`);
            
            updatedForThisKhoi += updateResult.modifiedCount;
            totalUpdated += updateResult.modifiedCount;
            
          } catch (updateError) {
            console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t MaTieuChi "${maTieuChi}":`, updateError);
            totalErrors++;
            errors.push(`L·ªói c·∫≠p nh·∫≠t MaTieuChi ${maTieuChi}: ${updateError.message}`);
          }
        }
        
        console.log(`üìä MaKhoi "${maKhoi}": ƒê√£ c·∫≠p nh·∫≠t ${updatedForThisKhoi} b·∫£n ghi`);
        processedKhois++;
        
      } catch (processError) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω ch∆∞∆°ng tr√¨nh ${chuongTrinh.MaKhoi}:`, processError);
        totalErrors++;
        errors.push(`L·ªói x·ª≠ l√Ω ch∆∞∆°ng tr√¨nh ${chuongTrinh.MaKhoi}: ${processError.message}`);
      }
    }
    
    // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
    let message = `‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω ${processedKhois} ch∆∞∆°ng tr√¨nh, b·ªè qua ${skippedKhois} ch∆∞∆°ng tr√¨nh. T·ªïng c·ªông c·∫≠p nh·∫≠t ${totalUpdated} b·∫£n ghi MonHocTieuChi.`;
    
    if (totalErrors > 0) {
      message += ` ‚ùå C√≥ ${totalErrors} l·ªói.`;
      if (errors.length > 0) {
        message += ` Chi ti·∫øt: ${errors.slice(0, 3).join('; ')}${errors.length > 3 ? '...' : ''}`;
      }
    }
    
    console.log('üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t DiemChon');
    console.log(`üìä T√≥m t·∫Øt: ${processedKhois} x·ª≠ l√Ω, ${skippedKhois} b·ªè qua, ${totalUpdated} c·∫≠p nh·∫≠t, ${totalErrors} l·ªói`);
    
    return res.render('allforms', { 
      message, 
      activeTab: 'importData' 
    });
    
  } catch (err) {
    console.error('‚ùå L·ªói t·ªïng th·ªÉ khi c·∫≠p nh·∫≠t DiemChon:', err);
    
    return res.render('allforms', {
      message: `‚ùå L·ªói khi c·∫≠p nh·∫≠t DiemChon: ${err.message}`,
      activeTab: 'importData'
    });
  }
};

// Function ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu chi ti·∫øt
exports.checkDiemChonData = async (req, res) => {
  try {
    console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu DiemChon chi ti·∫øt...');
    
    // Ki·ªÉm tra ChuongTrinh
    const allChuongTrinh = await ChuongTrinh.find({}).lean();
    console.log(`üìä T·ªïng s·ªë ChuongTrinh: ${allChuongTrinh.length}`);
    
    let validCount = 0;
    let nullCount = 0;
    let invalidCount = 0;
    
    allChuongTrinh.forEach(ct => {
      if (ct.DiemChon === null || ct.DiemChon === undefined || ct.DiemChon === 'null') {
        nullCount++;
      } else if (typeof ct.DiemChon === 'number' && !isNaN(ct.DiemChon)) {
        validCount++;
      } else {
        invalidCount++;
        console.log(`‚ùå Invalid DiemChon: MaKhoi="${ct.MaKhoi}", DiemChon="${ct.DiemChon}" (type: ${typeof ct.DiemChon})`);
      }
    });
    
    console.log(`üìä ChuongTrinh: ${validCount} h·ª£p l·ªá, ${nullCount} null, ${invalidCount} kh√¥ng h·ª£p l·ªá`);
    
    // L·∫•y m·ªôt v√†i m·∫´u h·ª£p l·ªá
    const validSamples = allChuongTrinh
      .filter(ct => ct.DiemChon !== null && ct.DiemChon !== undefined && typeof ct.DiemChon === 'number')
      .slice(0, 3);
    
    console.log('üìÑ M·∫´u ch∆∞∆°ng tr√¨nh h·ª£p l·ªá:');
    validSamples.forEach(sample => {
      console.log(`  - MaKhoi: "${sample.MaKhoi}", DiemChon: ${sample.DiemChon}`);
    });
    
    // Ki·ªÉm tra mapping gi·ªØa ChuongTrinh v√† TieuChiDauRa
    console.log('\nüîó Ki·ªÉm tra mapping ChuongTrinh -> TieuChiDauRa:');
    
    for (const sample of validSamples) {
      const tieuChiCount = await TieuChiDauRa.countDocuments({ MaKhoi: sample.MaKhoi });
      console.log(`  - MaKhoi "${sample.MaKhoi}": ${tieuChiCount} ti√™u ch√≠`);
      
      if (tieuChiCount > 0) {
        const tieuChiSamples = await TieuChiDauRa.find({ MaKhoi: sample.MaKhoi }).limit(2).lean();
        tieuChiSamples.forEach(tc => {
          console.log(`    * MaTieuChi: "${tc.MaTieuChi}"`);
        });
      }
    }
    
    // Ki·ªÉm tra mapping TieuChiDauRa -> MonHocTieuChi
    console.log('\nüîó Ki·ªÉm tra mapping TieuChiDauRa -> MonHocTieuChi:');
    
    const sampleTieuChi = await TieuChiDauRa.findOne({}).lean();
    if (sampleTieuChi) {
      const monHocCount = await MonHocTieuChi.countDocuments({ MaTieuChi: sampleTieuChi.MaTieuChi });
      console.log(`  - MaTieuChi "${sampleTieuChi.MaTieuChi}": ${monHocCount} b·∫£n ghi MonHocTieuChi`);
      
      if (monHocCount > 0) {
        const monHocSample = await MonHocTieuChi.findOne({ MaTieuChi: sampleTieuChi.MaTieuChi }).lean();
        console.log(`    * Sample: MaMH="${monHocSample.MaMH}", DiemChon=${monHocSample.DiemChon}`);
      }
    }
    
    return res.render('allforms', {
      message: `üìä Ki·ªÉm tra ho√†n t·∫•t: ${validCount} ch∆∞∆°ng tr√¨nh c√≥ DiemChon h·ª£p l·ªá, ${nullCount} null, ${invalidCount} kh√¥ng h·ª£p l·ªá. Xem console ƒë·ªÉ bi·∫øt chi ti·∫øt mapping.`,
      activeTab: 'importData'
    });
    
  } catch (err) {
    console.error('‚ùå L·ªói ki·ªÉm tra d·ªØ li·ªáu:', err);
    return res.render('allforms', {
      message: `‚ùå L·ªói ki·ªÉm tra d·ªØ li·ªáu: ${err.message}`,
      activeTab: 'importData'
    });
  }
};

// controllers/updateDiemChonController.js
exports.debugDataFlow = async (req, res) => {
  try {
    console.log('üîç DEBUG: Ki·ªÉm tra h∆∞·ªõng ƒëi d·ªØ li·ªáu...\n');
    
    // B∆∞·ªõc 1: L·∫•y 1 ch∆∞∆°ng tr√¨nh c√≥ DiemChon
    const sampleChuongTrinh = await ChuongTrinh.findOne({
      DiemChon: { $ne: null, $exists: true }
    }).lean();
    
    if (!sampleChuongTrinh) {
      return res.render('allforms', {
        message: '‚ùå Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh n√†o c√≥ DiemChon.',
        activeTab: 'importData'
      });
    }
    
    console.log('üìù B∆Ø·ªöC 1 - ChuongTrinh:');
    console.log(`   MaKhoi: "${sampleChuongTrinh.MaKhoi}"`);
    console.log(`   DiemChon: ${sampleChuongTrinh.DiemChon}`);
    console.log(`   Type: ${typeof sampleChuongTrinh.DiemChon}\n`);
    
    // B∆∞·ªõc 2: T√¨m TieuChiDauRa theo MaKhoi
    const tieuChiList = await TieuChiDauRa.find({
      MaKhoi: sampleChuongTrinh.MaKhoi
    }).lean();
    
    console.log('üìù B∆Ø·ªöC 2 - TieuChiDauRa:');
    console.log(`   T√¨m th·∫•y: ${tieuChiList.length} ti√™u ch√≠`);
    if (tieuChiList.length > 0) {
      console.log('   Danh s√°ch MaTieuChi:');
      tieuChiList.slice(0, 3).forEach((tc, index) => {
        console.log(`   ${index + 1}. "${tc.MaTieuChi}"`);
      });
      if (tieuChiList.length > 3) {
        console.log(`   ... v√† ${tieuChiList.length - 3} ti√™u ch√≠ kh√°c`);
      }
    }
    console.log('');
    
    // B∆∞·ªõc 3: Ki·ªÉm tra MonHocTieuChi cho t·ª´ng MaTieuChi
    console.log('üìù B∆Ø·ªöC 3 - MonHocTieuChi:');
    let totalFound = 0;
    let totalWithDiemChon = 0;
    
    for (let i = 0; i < Math.min(3, tieuChiList.length); i++) {
      const maTieuChi = tieuChiList[i].MaTieuChi;
      
      const monHocRecords = await MonHocTieuChi.find({
        MaTieuChi: maTieuChi
      }).lean();
      
      const withDiemChon = monHocRecords.filter(mh => mh.DiemChon !== null && mh.DiemChon !== undefined).length;
      
      console.log(`   MaTieuChi "${maTieuChi}": ${monHocRecords.length} b·∫£n ghi, ${withDiemChon} c√≥ DiemChon`);
      
      if (monHocRecords.length > 0) {
        const sample = monHocRecords[0];
        console.log(`      Sample: MaMH="${sample.MaMH}", DiemChon=${sample.DiemChon}`);
      }
      
      totalFound += monHocRecords.length;
      totalWithDiemChon += withDiemChon;
    }
    
    console.log(`\nüìä T·ªîNG K·∫æT cho MaKhoi "${sampleChuongTrinh.MaKhoi}":`);
    console.log(`   - ${tieuChiList.length} ti√™u ch√≠`);
    console.log(`   - ${totalFound} b·∫£n ghi MonHocTieuChi (sample 3 ti√™u ch√≠ ƒë·∫ßu)`);
    console.log(`   - ${totalWithDiemChon} b·∫£n ghi ƒë√£ c√≥ DiemChon`);
    
    // Test update 1 b·∫£n ghi ƒë·ªÉ xem c√≥ ho·∫°t ƒë·ªông kh√¥ng
    if (tieuChiList.length > 0) {
      const testMaTieuChi = tieuChiList[0].MaTieuChi;
      
      console.log(`\nüß™ TEST UPDATE cho MaTieuChi "${testMaTieuChi}":`);
      
      const updateResult = await MonHocTieuChi.updateMany(
        { MaTieuChi: testMaTieuChi },
        { $set: { DiemChon: sampleChuongTrinh.DiemChon } }
      );
      
      console.log(`   K·∫øt qu·∫£: matched=${updateResult.matchedCount}, modified=${updateResult.modifiedCount}`);
    }
    
    return res.render('allforms', {
      message: `üîç Debug ho√†n t·∫•t cho MaKhoi "${sampleChuongTrinh.MaKhoi}". T√¨m th·∫•y ${tieuChiList.length} ti√™u ch√≠ v√† ${totalFound} b·∫£n ghi MonHocTieuChi. Xem console ƒë·ªÉ bi·∫øt chi ti·∫øt.`,
      activeTab: 'importData'
    });
    
  } catch (err) {
    console.error('‚ùå L·ªói debug:', err);
    return res.render('allforms', {
      message: `‚ùå L·ªói debug: ${err.message}`,
      activeTab: 'importData'
    });
  }
};